// ClientSocket.cpp : implementation file
//
// 이현철
// forcewin@popsmail.com

#include "stdafx.h"
#include "ClientSocket.h"

#include "Variable.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CClientSocket

CClientSocket::CClientSocket()
{

}

CClientSocket::~CClientSocket()
{

}


// Do not edit the following lines, which are needed by ClassWizard.
#if 0
BEGIN_MESSAGE_MAP(CClientSocket, CSocket)
	//{{AFX_MSG_MAP(CClientSocket)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()
#endif	// 0

/////////////////////////////////////////////////////////////////////////////
// CClientSocket member functions

BOOL CClientSocket::Create(int n_address, CString str_ip, int n_port, int n_timeout)
{
	if (!CSocket::Create())
	{
		return FALSE;
	}
	
	CSocket::m_nTimeOut = n_timeout;

	if (!CSocket::Connect(str_ip, n_port))
	{
		CSocket::Close();
		return FALSE;
	}
	
	m_n_address = n_address;
	return TRUE;
}

void CClientSocket::OnReceive(int nErrorCode) 
{
	// 수신된 데이터 읽기
	st_client[m_n_address].n_rev_length = Receive(st_client[m_n_address].ch_rev, 4096);
	//::PostMessage(st_handler.hWnd, WM_CLIENT_MSG, CLIENT_REV, m_n_address);	// 메인 프레임으로 메시지 전송하여 메인 화면으로 전환 

	// 규이리 수정 [2013.11.23]
	// [호스트->서버] 입력된 정보는 곧바로 처리되도록 수정함
	//::SendMessage(st_handler.hWnd, WM_CLIENT_MSG+m_n_address, CLIENT_REV, m_n_address);
	::SendMessage(st_handler.hWnd, WM_CLIENT_MSG+m_n_address, CLIENT_REV, m_n_address);

	CSocket::OnReceive(nErrorCode);
}

void CClientSocket::OnClose(int nErrorCode) 
{
	// 규이리 추가 [2014.08.11]
	st_client[m_n_address].n_rev_length = Receive(st_client[m_n_address].ch_rev, 4096);

	// 규이리 수정 [2013.11.23]
	//::SendMessage(st_handler.hWnd, WM_CLIENT_MSG+m_n_address, CLIENT_CLOSE, m_n_address);
	::PostMessage(st_handler.hWnd, WM_CLIENT_MSG+m_n_address, CLIENT_CLOSE, m_n_address);

	CSocket::OnClose(nErrorCode);
}

void CClientSocket::OnAccept(int nErrorCode) 
{
	// TODO: Add your specialized code here and/or call the base class
	
	CSocket::OnAccept(nErrorCode);
}

void CClientSocket::OnConnect(int nErrorCode) 
{
	// TODO: Add your specialized code here and/or call the base class
	CSocket::OnConnect(nErrorCode);
}

BOOL CClientSocket::IsConnect()
{
	return 0;
}

int CClientSocket::Receive(void* lpBuf, int nBufLen, int nFlags) 
{
	// TODO: Add your specialized code here and/or call the base class
	
	return CSocket::Receive(lpBuf, nBufLen, nFlags);
}

BOOL CClientSocket::ConnectHelper(const SOCKADDR* lpSockAddr, int nSockAddrLen)
{
	CTime  curt, st;
	CTimeSpan span(0, 0, 0, m_nTimeOut);

	if (m_pbBlocking != NULL)
	{
		WSASetLastError(WSAEINPROGRESS);
		return  FALSE;
	}
	
	m_nConnectError = -1;
	
	if(!CAsyncSocket::ConnectHelper(lpSockAddr, nSockAddrLen))
	{
		if(GetLastError() == WSAEWOULDBLOCK)
		{
			st = CTime().GetCurrentTime();

			while(PumpMessages(FD_CONNECT))
			{
				if(m_nConnectError != -1)
				{
					WSASetLastError(m_nConnectError);
					return (m_nConnectError == 0);
				}

				curt = CTime().GetCurrentTime();

				if(curt > (st + span))
				{
					return FALSE;
				}
			}
		}
		return FALSE;
	}
	return TRUE;
}