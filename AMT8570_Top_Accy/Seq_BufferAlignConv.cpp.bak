// Seq_BufferAlignConv.cpp: implementation of the CSeq_BufferAlignConv class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "handler.h"
#include "Seq_BufferAlignConv.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
CSeq_BufferAlignConv	SeqBufferAlignConv;

CSeq_BufferAlignConv::CSeq_BufferAlignConv()
{
	//m_nTestSupply = TRUE;
	m_nTestSupply = FALSE;
}

CSeq_BufferAlignConv::~CSeq_BufferAlignConv()
{
	OnMove_AcMotor(AC_MV_STOP_);	// AC 모터 구동/정지
}


//==================================================================//
// 쓰레드 동작
//==================================================================//
void CSeq_BufferAlignConv::OnSeq_RUN(void) 
{
	OnSeq_INIT();     // 쓰레드 관련 변수 초기화
	OnSeq_Execute();  // 쓰레드 제어
}

//==================================================================//
// 쓰레드 관련 변수 초기화
//==================================================================//
void CSeq_BufferAlignConv::OnSeq_INIT(void) 
{
	if (m_bflag_INIT == true)	{
		return;
	}
	m_bflag_INIT = true;

	m_nStep_Init	= 0;
	m_nStep_Run		= 0;
	m_nStep_ForceDischarge = 0;

	// kilee [2015.02.28]
	m_nReq_Completemsg = FALSE;
}

//==================================================================//
// 쓰레드 제어
//==================================================================//
void CSeq_BufferAlignConv::OnSeq_Execute(void) 
{
	// 시컨스 인터럽트 조건 확인
	if (Func.OnIsInterruptCondition() == 1)
	{
		return;
	}
	int nRet = 0;

	//==============================================================//
	// AC 모터를 설비 상태에 상관없이 제어하기 위하여 추가함
	// : 이곳에서는 TIME OUT 처리 하지 않음
	// : 설비 상태가 START 상태로 변경되면 곧바로 TIME OUT 검사하기 때문
	//==============================================================//
	if (st_work.nEqpStatus != dRUN)
	{
		// 일정 시간동안 컨베이어 제어하는 동작에서는 시작 시간을 갱신하지 않음
		// 그 외 동작에서는 시작 시간을 갱신함
		// - 센서 위치까지 굴러가는 시간을 처음부터 다시 설정해야 하기 때문
		// - 안그러면 시간을 다 지나가 버렸으므로 곧바로 TIME OUT 에러 발생함
		if (m_nReq_AcMotCtrl != REQ_MV_INIT_)
		{
			// [RUN] 상태로 변경되기 전의 맨 마지막 시간 정보 설정
			// - 이 정소는 [RUN] 상태로 변경되기까지 계속 갱신될 것임
			m_lTime_GoesBy[0] = GetCurrentTime();
		}
	}
	if (m_nReq_AcMotCtrl == REQ_MV_ACCY_OUT_)			// [Accy Conv] 첫번째 위치에 자재 공급 요청인 경우
	{
		nRet = OnCheck_OutAccySupply(IO_ON);	// [SIDE_FIRST_] 악세사리 버퍼에 자재가 존재하는지 확인
		if (nRet == IO_ON)	// 센서에 감지됨
		{
			m_lTime_GoesBy[0] = GetCurrentTime();
			m_nReq_AcMotCtrl = REQ_MV_STABILITY_;
		}
	}
	else if (m_nReq_AcMotCtrl == REQ_MV_STABILITY_)	// 일정 시간만큼 감아달라는 요청인 경우
	{
		m_lTime_GoesBy[1] = GetCurrentTime();
		m_lTime_GoesBy[2] = m_lTime_GoesBy[1] - m_lTime_GoesBy[0];
		if (m_lTime_GoesBy[2] < 0)
		{
			m_lTime_GoesBy[0] = GetCurrentTime();
		}

		if (m_lTime_GoesBy[2] >= st_time.nWait_On[WAIT_ACCY_OUT_AC_OFF])	// 안정 시간 후에 AC 모터 정지시킴
		{
			nRet = OnCheck_OutAccySupply(IO_ON);	// [SIDE_FIRST_] 악세사리 버퍼에 자재가 존재하는지 확인
			if (nRet == IO_OFF)	// 센서에 감지됨
			{
				OnMove_AcMotor(AC_MV_STOP_);	// AC 모터 구동/정지
			}
			
		}
	}
	// 초기화 작업 시 레일 구동 요청인 경우
	else if (m_nReq_AcMotCtrl == REQ_MV_INIT_)
	{
		m_lTime_GoesBy[1] = GetCurrentTime();
		m_lTime_GoesBy[2] = m_lTime_GoesBy[1] - m_lTime_GoesBy[0];
		if (m_lTime_GoesBy[2] < 0)
		{
			m_lTime_GoesBy[0] = GetCurrentTime();
			return;
		}

		if (m_lTime_GoesBy[2] > 5000)
		{
			OnMove_AcMotor(AC_MV_STOP_);	// AC 모터 구동/정지
		}
	}

	switch(st_work.nEqpStatus)
	{
	case dINIT:
		// 초기화 진행 대화상자에서 [YES] 선택했는지 여부
		if (st_handler.nInitTryREQ != YES)
		{
			break;
		}
		OnRun_Initial();  // BufferAlignConv 초기화 작업
		break;
		
	case dRUN:
		// 초기화 작업이 완료되지 않으면 [AUTO] 작업 시작 불가능
		// st_handler.nIsAllSiteInitEnd : 초기화 화면에서 설정
		if (st_handler.nIsAllSiteInitEnd == CTL_YES)
		{
			OnRun_Move();
		}
		break;
		
	default :
		// yangkyu 2015.03.31
		// Run 상태일때가 아닌 Stop 상태일때 동작을 하도록 수정.
		OnRun_ForceDischarge();
		break;
	}
}

void CSeq_BufferAlignConv::OnRun_Initial() 
{
	// 초기화 작업이 완료된 경우 강제 리턴함
	if (st_handler.mn_init_state[INIT_BUFFER_CONV] != CTL_NO)
	{
		return;
	}

	int nRet = VAR_INIT_;
	int nRetData[4] = {0,};

	switch(m_nStep_Init)
	{
	case 0:
		memset(st_map.nBufferCovAccyExist, 0, sizeof(st_map.nBufferCovAccyExist));
		// XYZ Robot에 보내는 요청을 Reset 후 다음 Step 진행
		stSync.nResp_BufferAlaignConv2XYZRbt_Work = SYNC_RESP_RESET_;
		m_nStep_Init = 200;
		break;

	case 200:
		OnSet_CylBufferTrayPitch(IO_ON);		// Accy를 보급 또는 공급을 위해 Buffer Tray Pitch를 변경 하는 실린더 [ON:Fw, OFF:Bw]
		m_nStep_Init = 210;
		break;

	case 210:
		nRet = OnGet_CylBufferTrayPitch(IO_ON);
		if(nRet == CTL_GOOD)
		{
			//m_nStep_Init = 300;
			m_nStep_Init = 250;
		}
		else if(nRet == CTL_ERROR)
		{
			// 알람 코드는 OnGet_CylBufferTrayPitch() 함수 안에서 설정함
			m_nStep_Init = 200;
		}
		break;
		
		// KILEE [2015.02.09]
	case 250:
		OnMove_AcMotor(AC_MV_STOP_);
		m_nStep_Init = 300;
		break;

	case 300:
		OnSet_CylBufferTrayPathAlign(IO_ON);		// Accy를 보급 또는 공급을 위해 Buffer Tray Path를 변경 하는 실린더 [ON:Up, OFF:Down]
		OnSet_CylStopper(IO_ON);		// 악세사리 스토퍼 [ON:UP, OFF:DOWN]
		m_nStep_Init = 310;
		break;

	case 310:
		nRetData[0] = OnGet_CylBufferTrayPathAlign(IO_ON);
		nRetData[1] = OnGet_CylStopper(IO_ON);
		if(nRetData[0] == CTL_GOOD && nRetData[1] == CTL_GOOD)
		{
			m_nStep_Init = 600;
		}
		else if(nRet == CTL_ERROR)
		{
			m_nStep_Init = 300;
		}
		break;

	case 600:
		// 초기화 화면에서 [초기화] 완료 표시 가능
		stSync.nResp_BufferAlaignConv2XYZRbt_Work = SYNC_RESP_RESET_;
		st_handler.mn_init_state[INIT_BUFFER_CONV] = CTL_YES;
		m_nStep_Init = 0;
		break;
	}
}

void CSeq_BufferAlignConv::OnRun_Move() 
{
	// 전체 사이트 복구 동작 완료 여부 확인
	// - 모든 부분의 복구 동작이 완료된 후에만 시컨스 동작하도록 함
	// : 복구 동작 중에 시컨스 구동하면 복구하는 영역과 충돌이 발생할 수 있음
	if (Func.OnIsAllRcvyComplete() != CTL_YES)
	{
		return;
	}
	Func.OnTrace_ThreadStep(19, m_nStep_Run);

	int nRet = VAR_INIT_;
	int nRetData[4] = {0,};
	int i = 0;
	CString sTmp;

	switch(m_nStep_Run)
	{
	case 0:
		// KILEE [2015.02.28]
		if (stSync.nLotEnd_BufferAlignConv == TRUE)
		{
			nRet = Func.OnGet_UpStreamSmema();		// [상류 설비] SMEMA 상태 확인
			if(nRet == REQ_REQUEST_ON_)
			{
				if (m_nReq_Completemsg == FALSE)
				{
					m_nReq_Completemsg = TRUE;
					
					g_client_accy.OnCreate_SendFormat(MAIN_ACCY_SUPPLY_COMPLETE);
					g_client_accy.OnReq_CommStart();
				}
			}
		}
		
		// Lot Start 상태가 될때까지 대기
		if (st_map.nLotStart != CTL_YES)
		{
			break;
		}
		
		// XYZRobot가 Lot End 상태
		if(	stSync.nLotEnd_XYZRobot == TRUE)
		{
			// 모든 유닛이 Lot End 상태지만 Conv가 Lot End 상태가 아닐때를 확인하여 Lot End 처리
			if (stSync.nLotEnd_LoadingConv == TRUE && stSync.nLotEnd_BoxClamp == TRUE &&
				stSync.nLotEnd_BoxLifter == TRUE &&	stSync.nLotEnd_XYZRobot == TRUE &&
				stSync.nLotEnd_BufferAlignConv == FALSE)
			{
				st_map.nLotStart = CTL_NO;
				stSync.nLotEnd_BufferAlignConv = TRUE;
				stSync.nResp_BufferAlaignConv2XYZRbt_Work = SYNC_RESP_RESET_;
				m_nStep_Run = 0;
			}
			break;
		}
		else
		{
			stSync.nLotEnd_BufferAlignConv = FALSE;
		}

		// [Buffer Conv -> XYZRbt] Loading Ready 요청 대기
		if(stSync.nReq_XYZRbt2BufferAlaignConv_Work == SYNC_REQ_BUFFER_LOADING_READY_)
		{
			st_work.nSkipReq_BufferConv[SIDE_FRONT_] = CTL_NO; 
			st_work.nSkipReq_BufferConv[SIDE_REAR_] = CTL_NO;

			if (st_map.nBoxChange == TRUE)
			{
				g_client_accy.OnCreate_SendFormat(MAIN_SUPPLY_READY_CNT);
				g_client_accy.OnReq_CommStart();
				st_map.nBoxChange = FALSE;
			}
			// [Buffer Conv <- XYZRbt] Loading 응답
			stSync.nResp_BufferAlaignConv2XYZRbt_Work = SYNC_RESP_LOADING_;
			m_nStep_Run = 50;

			// kilee [2015.02.28]
			m_nReq_Completemsg = FALSE;
		}
		break;

	case 50:
		// [Buffer Conv -> XYZRbt] Work Complete 요청 대기
		if(stSync.nReq_XYZRbt2BufferAlaignConv_Work == SYNC_REQ_WORK_COMPLETE_)
		{
			// kilee [2015.03.25]
			m_lTime_GoesBy[0] = GetCurrentTime();
			m_nStep_Run = 80;
		}
		break;

	case 80:
		nRetData[0] = OnCheck_FrontAccySupply(IO_ON);		// Buffer Conv Front Accy 확인
		nRetData[1] = OnCheck_RearAccySupply(IO_ON);		// Buffer Conv Rear Accy 확인
		if(nRetData[0] == IO_ON && nRetData[1] == IO_ON)
		{
			stSync.nResp_BufferAlaignConv2XYZRbt_Work = SYNC_RESP_WORK_;
			m_nStep_Run = 100;
		}
		else
		{
			m_lTime_GoesBy[1] = GetCurrentTime();
			m_lTime_GoesBy[2] = m_lTime_GoesBy[1] - m_lTime_GoesBy[0];
			if (m_lTime_GoesBy[2] < 0)
			{
				m_lTime_GoesBy[0] = GetCurrentTime();
				break;
			}
			
			if (m_lTime_GoesBy[2] > 500)
			{
				// 150001 0 15 "LOST_ACCY_ERR."
				alarm.mstr_code		= "150001";
				alarm.mn_count_mode	= 0;
				alarm.mn_type_mode	= eWARNING;
				st_work.nEqpStatus	= dWARNING;
			}
		}
		break;

	case 100:
		OnSet_CylBufferTrayPathAlign(IO_OFF);		// Accy를 보급 또는 공급을 위해 Buffer Tray Path를 변경 하는 실린더 [ON:Up, OFF:Down]
		m_nStep_Run = 110;
		break;

	case 110:
		nRet = OnGet_CylBufferTrayPathAlign(IO_OFF);

		if(nRet == CTL_GOOD)
		{
			m_nStep_Run = 200;
		}
		else if(nRet == CTL_ERROR)
		{
			m_nStep_Run = 100;
		}
		break;

	case 200:
		OnSet_CylBufferTrayPitch(IO_OFF);		// Accy를 보급 또는 공급을 위해 Buffer Tray Pitch를 변경 하는 실린더 [ON:Fw, OFF:Bw]
		m_nStep_Run = 210;
		break;

	case 210:
		nRet = OnGet_CylBufferTrayPitch(IO_OFF);
		
		if(nRet == CTL_GOOD)
		{
			// yangkyu [2015.03.06]
			// 테스트를 위해 Main에 공급 하지 않고 테스트를 위해 추가
			if (m_nTestSupply == TRUE)
			{
				m_nStep_Run = 220;
				break;
			}

			if(st_basic.n_mode_device == WITHOUT_DVC_)
			{
				if(st_basic.nMode_SMEMAUsing == SMEMA_NOT_USING)
				{
					m_lTime_GoesBy[0] = GetCurrentTime();
					OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
					m_nReq_AcMotCtrl = REQ_MV_ACCY_OUT_;
					m_nStep_Run = 260;
					break;
				}
			}
			else
			{
				if(st_basic.nMode_SMEMAUsing == SMEMA_NOT_USING)
				{
					m_lTime_GoesBy[0] = GetCurrentTime();
					OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
					m_nReq_AcMotCtrl = REQ_MV_ACCY_OUT_;
					m_nStep_Run = 260;
					break;
				}
			}
			m_nStep_Run = 250;
			
		}
		else if(nRet == CTL_ERROR)
		{
			m_nStep_Run = 200;
		}
		break;

	// yangkyu [2015.03.06]
	// 테스트를 위해 Main에 공급 하지 않고 테스트를 위해 추가
	case 220:
		nRetData[0] = OnCheck_FrontAccySupply(IO_ON);		// Buffer Conv Front Accy 확인
		nRetData[1] = OnCheck_RearAccySupply(IO_ON);		// Buffer Conv Rear Accy 확인
		nRetData[2] = OnCheck_OutAccySupply(IO_ON);		// Buffer Conv Out 확인

		if (nRetData[0] == IO_OFF && nRetData[1] == IO_OFF && nRetData[2] == IO_OFF)
		{
			memset(st_map.nBufferCovAccyExist, ACCY_NO_, sizeof(st_map.nBufferCovAccyExist));

			m_nStep_Run = 800;
		}
		break;

	case 250:
		if (st_work.nSkipReq_BufferConv[SIDE_FRONT_] == CTL_YES)
		{
			st_map.nBufferCovAccyExist[0] = ACCY_NO_;
			st_map.nBufferCovAccyExist[1] = ACCY_NO_;
			st_work.sBufferConvBCR_Data[0] = "";
			st_work.sBufferConvBCR_Data[1] = "";
			st_work.nSkipReq_BufferConv[SIDE_FRONT_] = CTL_NO;
			m_nStep_Run = 370;
			break;
		}
		if (st_work.nSkipReq_BufferConv[SIDE_FRONT_] == CTL_YES && 
			st_work.nSkipReq_BufferConv[SIDE_REAR_] == CTL_YES)
		{
			st_map.nBufferCovAccyExist[0] = ACCY_NO_;
			st_map.nBufferCovAccyExist[1] = ACCY_NO_;
			st_map.nBufferCovAccyExist[2] = ACCY_NO_;
			st_map.nBufferCovAccyExist[3] = ACCY_NO_;
			st_work.sBufferConvBCR_Data[0] = "";
			st_work.sBufferConvBCR_Data[1] = "";
			st_work.sBufferConvBCR_Data[2] = "";
			st_work.sBufferConvBCR_Data[3] = "";
			st_work.nSkipReq_BufferConv[SIDE_FRONT_] = CTL_NO;
			st_work.nSkipReq_BufferConv[SIDE_REAR_] = CTL_NO;

			m_nStep_Run = 700;
			break;
		}

		nRet = Func.OnGet_UpStreamSmema();		// [상류 설비] SMEMA 상태 확인
		if(nRet == REQ_REQUEST_ON_)
		{
			// SLAVE_MODE(TOP)의 경우 Accy Math 코드를 하지 않음.
			// BCR가 없으므로 공급 진행.
			if (st_basic.nMode_SupplyMode == SLAVE_MODE)
			{
				m_nStep_Run = 255;
			}
			else
			{
				//st_work.m_sAccyMathCode = "LA69-01773A";
				if (st_work.m_sAccyMathCode != "")
				{
					sTmp.Format("AccyMathCode = %s, BufferConvBCR_Data[0] = %s, BufferConvBCR_Data[1] = %s ",
						st_work.m_sAccyMathCode, st_work.sBufferConvBCR_Data[0], st_work.sBufferConvBCR_Data[1]);
					cLOG.OnLogEvent( LOG_BCR_, sTmp );
					
					if (st_work.m_sAccyMathCode == st_work.sBufferConvBCR_Data[0] &&
						st_work.m_sAccyMathCode == st_work.sBufferConvBCR_Data[1])
					{
						m_nStep_Run = 255;
					}
					else
					{
						// 145000 0 00 "ACCY_CONV_DATA_MISS_MATH."
						alarm.mstr_code		= "145000";
						alarm.mn_count_mode	= 0;
						alarm.mn_type_mode	= eWARNING;
						st_work.nEqpStatus	= dWARNING;
					}
				}
			}
		}
		break;

	case 255:
		nRet = Func.OnGet_UpStreamSmema();		// [상류 설비] SMEMA 상태 확인
		if(nRet == REQ_REQUEST_ON_)
		{
			Func.OnSet_UpStreamSmema(RDY_READY_ON_);	// [상류 설비] SMEMA 상태 설정
			OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
			m_lTime_GoesBy[0] = GetCurrentTime();
			m_nStep_Run = 260;
		}
		break;

		/*
	case 250:
		if (st_work.nSkipReq_BufferConv[SIDE_FRONT_] == CTL_YES)
		{
			st_map.nBufferCovAccyExist[0] = ACCY_NO_;
			st_map.nBufferCovAccyExist[1] = ACCY_NO_;
			st_work.sBufferConvBCR_Data[0] = "";
			st_work.sBufferConvBCR_Data[1] = "";
			st_work.nSkipReq_BufferConv[SIDE_FRONT_] = CTL_NO;
			m_nStep_Run = 370;
			break;
		}
		if (st_work.nSkipReq_BufferConv[SIDE_FRONT_] == CTL_YES && 
			st_work.nSkipReq_BufferConv[SIDE_REAR_] == CTL_YES)
		{
			st_map.nBufferCovAccyExist[0] = ACCY_NO_;
			st_map.nBufferCovAccyExist[1] = ACCY_NO_;
			st_map.nBufferCovAccyExist[2] = ACCY_NO_;
			st_map.nBufferCovAccyExist[3] = ACCY_NO_;
			st_work.sBufferConvBCR_Data[0] = "";
			st_work.sBufferConvBCR_Data[1] = "";
			st_work.sBufferConvBCR_Data[2] = "";
			st_work.sBufferConvBCR_Data[3] = "";
			st_work.nSkipReq_BufferConv[SIDE_FRONT_] = CTL_NO;
			st_work.nSkipReq_BufferConv[SIDE_REAR_] = CTL_NO;
			
			m_nStep_Run = 700;
			break;
		}
		
		nRet = Func.OnGet_UpStreamSmema();		// [상류 설비] SMEMA 상태 확인
		if(nRet == REQ_REQUEST_ON_)
		{
			// SLAVE_MODE(TOP)의 경우 Accy Math 코드를 하지 않음.
			// BCR가 없으므로 공급 진행.
			if (st_basic.nMode_SupplyMode == SLAVE_MODE)
			{
				Func.OnSet_UpStreamSmema(RDY_READY_ON_);	// [상류 설비] SMEMA 상태 설정
				OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
				m_lTime_GoesBy[0] = GetCurrentTime();
				m_nStep_Run = 260;
			}
			else
			{
				if (st_work.m_sAccyMathCode != "")
				{
					sTmp.Format("AccyMathCode = %s, BufferConvBCR_Data[0] = %s, BufferConvBCR_Data[1] = %s ",
						st_work.m_sAccyMathCode, st_work.sBufferConvBCR_Data[0], st_work.sBufferConvBCR_Data[1]);
					cLOG.OnLogEvent( LOG_BCR_, sTmp );
					
					if (st_work.m_sAccyMathCode == st_work.sBufferConvBCR_Data[0] &&
						st_work.m_sAccyMathCode == st_work.sBufferConvBCR_Data[1])
					{
						Func.OnSet_UpStreamSmema(RDY_READY_ON_);	// [상류 설비] SMEMA 상태 설정
						OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
						m_lTime_GoesBy[0] = GetCurrentTime();
						m_nStep_Run = 260;
					}
					else
					{
						// 145000 0 00 "ACCY_CONV_DATA_MISS_MATH."
						alarm.mstr_code		= "145000";
						alarm.mn_count_mode	= 0;
						alarm.mn_type_mode	= eWARNING;
						st_work.nEqpStatus	= dWARNING;
					}
				}
			}
		}
		break;
*/
	case 260:
		if(st_basic.nMode_SMEMAUsing == SMEMA_NOT_USING)
		{
			m_lTime_GoesBy[1] = GetCurrentTime();
			m_lTime_GoesBy[2] = m_lTime_GoesBy[1] - m_lTime_GoesBy[0];
			if (m_lTime_GoesBy[2] < 0)
			{
				m_lTime_GoesBy[0] = GetCurrentTime();
				break;
			}
			
			// [WithOut] 모드인지 확인
			// - 자재가 없기 때문에 센서에 감지되지 않음
			// - 센서를 보고 멈출 수 있는 조건이 아니므로 일정 시간 후에 강제로 멈춤
			if (st_basic.n_mode_device == WITHOUT_DVC_)
			{
				if (m_lTime_GoesBy[2] >= (MAX_WAIT_ACCY_BOX_CONV_ / 5))
				{
					st_map.nBufferCovAccyExist[0] = ACCY_NO_;
					st_map.nBufferCovAccyExist[1] = ACCY_NO_;
					st_work.sBufferConvBCR_Data[0] = "";
					st_work.sBufferConvBCR_Data[1] = "";
					
					if (st_handler.cwnd_main != NULL)
					{
						// Buffer Cov 자재 존재 상태 표시 요청
						st_handler.cwnd_main->PostMessage(WM_UPDATE_MAIN, PLACE_BUFFER_CONV_);
					}
					OnMove_AcMotor(AC_MV_STOP_);	// AC 모터 구동/정지
					m_nStep_Run = 300;
				}
			}
			else
			{
				if(m_nReq_AcMotCtrl == REQ_MV_RESET_)
				{
					st_map.nBufferCovAccyExist[0] = ACCY_NO_;
					st_map.nBufferCovAccyExist[1] = ACCY_NO_;
					st_work.sBufferConvBCR_Data[0] = "";
					st_work.sBufferConvBCR_Data[1] = "";

					if (st_handler.cwnd_main != NULL)
					{
						// Buffer Cov 자재 존재 상태 표시 요청
						st_handler.cwnd_main->PostMessage(WM_UPDATE_MAIN, PLACE_BUFFER_CONV_);
					}
					m_nStep_Run = 300;
				}
			}
		}
		else
		{
			nRet = g_ioMgr.get_in_bit(stIO.i_Chk_ReqFromMain);		// [Conv<-Mani] 자재 공급 완료를 기다림
			if (nRet == IO_OFF)
			{
				OnMove_AcMotor(AC_MV_STOP_);	// AC 모터 구동/정지
				st_map.nBufferCovAccyExist[0] = ACCY_NO_;
				st_map.nBufferCovAccyExist[1] = ACCY_NO_;
				st_work.sBufferConvBCR_Data[0] = "";
				st_work.sBufferConvBCR_Data[1] = "";
				
				if (st_handler.cwnd_main != NULL)
				{
					// Buffer Cov 자재 존재 상태 표시 요청
					st_handler.cwnd_main->PostMessage(WM_UPDATE_MAIN, PLACE_BUFFER_CONV_);
				}
				Func.OnSet_UpStreamSmema(RDY_READY_OFF_);	// [상류 설비] SMEMA 상태 설정
				m_nStep_Run = 300;
			}
		}
		break;
		
	case 300:
		nRet = OnCheck_FrontAccySupply(IO_ON);		// Buffer Conv Front Accy 확인

		if (st_basic.n_mode_device == WITHOUT_DVC_)
		{
			if (st_map.nBufferCovAccyExist[0] == ACCY_NO_ && st_map.nBufferCovAccyExist[1] == ACCY_NO_)
			{
				nRet = IO_OFF;
			}
		}

		if(nRet == IO_OFF && st_map.nBufferCovAccyExist[0] == ACCY_NO_ && st_map.nBufferCovAccyExist[1] == ACCY_NO_)
		{
			st_map.nResp_AccyReadyCNT -= 2;
			g_client_accy.OnCreate_SendFormat(MAIN_SUPPLY_READY_CNT);
			g_client_accy.OnReq_CommStart();
			m_nStep_Run = 310;
		}
		// yangkyu [2015.05.21]
		else if (nRet == IO_ON && st_map.nBufferCovAccyExist[0] == ACCY_NO_ && st_map.nBufferCovAccyExist[1] == ACCY_NO_)
		{
			// 142000 0 00 "PS1106_PS1107_PS1108_PS1109_ACCY_CONV_ACCY_EXSIT_CHK_ERR."
			alarm.mstr_code		= "142000";
			alarm.mn_count_mode	= 0;
			alarm.mn_type_mode	= eWARNING;
			st_work.nEqpStatus	= dWARNING;
		}
		break;

	case 310:
		OnSet_CylStopper(IO_OFF);		// 악세사리 스토퍼 [ON:UP, OFF:DOWN]
		m_nStep_Run = 320;
		break;

	case 320:
		nRet = OnGet_CylStopper(IO_OFF);
		
		if(nRet == CTL_GOOD)
		{
			if(st_basic.n_mode_device == WITHOUT_DVC_)
			{
				if(st_basic.nMode_SMEMAUsing == SMEMA_NOT_USING)
				{
					m_lTime_GoesBy[0] = GetCurrentTime();
					OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
					m_nReq_AcMotCtrl = REQ_MV_ACCY_OUT_;
					m_nStep_Run = 380;
					break;
				}
			}
			else
			{
				if(st_basic.nMode_SMEMAUsing == SMEMA_NOT_USING)
				{
					m_lTime_GoesBy[0] = GetCurrentTime();
					OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
					m_nReq_AcMotCtrl = REQ_MV_ACCY_OUT_;
					m_nStep_Run = 380;
					break;
				}
			}
			m_nStep_Run = 370;
		}
		else if (nRet == CTL_ERROR)
		{
			m_nStep_Run = 310;
		}
		break;

	case 370:
		if (st_work.nSkipReq_BufferConv[SIDE_REAR_] == CTL_YES)
		{
			st_map.nBufferCovAccyExist[2] = ACCY_NO_;
			st_map.nBufferCovAccyExist[3] = ACCY_NO_;
			st_work.sBufferConvBCR_Data[2] = "";
			st_work.sBufferConvBCR_Data[3] = "";
			st_work.nSkipReq_BufferConv[SIDE_REAR_] = CTL_NO;
			m_nStep_Run = 700;
			break;
		}

		nRet = Func.OnGet_UpStreamSmema();		// [상류 설비] SMEMA 상태 확인
		if(nRet == REQ_REQUEST_ON_)
		{
			// SLAVE_MODE(TOP)의 경우 Accy Math 코드를 하지 않음.
			// BCR가 없으므로 공급 진행.
			if (st_basic.nMode_SupplyMode == SLAVE_MODE)
			{
				m_nStep_Run = 375;
			}
			else
			{
				if (st_work.m_sAccyMathCode != "")
				{
					sTmp.Format("AccyMathCode = %s, BufferConvBCR_Data[2] = %s, BufferConvBCR_Data[3] = %s ",
						st_work.m_sAccyMathCode, st_work.sBufferConvBCR_Data[2], st_work.sBufferConvBCR_Data[3]);
					cLOG.OnLogEvent( LOG_BCR_, sTmp );

					if (st_work.m_sAccyMathCode == st_work.sBufferConvBCR_Data[2] &&
						st_work.m_sAccyMathCode == st_work.sBufferConvBCR_Data[3])
					{
						m_nStep_Run = 375;
					}
					else
					{
						// 145000 0 00 "ACCY_CONV_ACCY_BCR_DATA_MISS_MATH."
						alarm.mstr_code		= "145001";
						alarm.mn_count_mode	= 0;
						alarm.mn_type_mode	= eWARNING;
						st_work.nEqpStatus	= dWARNING;
					}
				}
			}
		}
		break;

	case 375:
		nRet = Func.OnGet_UpStreamSmema();		// [상류 설비] SMEMA 상태 확인
		if(nRet == REQ_REQUEST_ON_)
		{
			Func.OnSet_UpStreamSmema(RDY_READY_ON_);	// [상류 설비] SMEMA 상태 설정
			OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
			m_lTime_GoesBy[0] = GetCurrentTime();
			m_nStep_Run = 380;
		}
		break;
		
/*
	case 370:
		if (st_work.nSkipReq_BufferConv[SIDE_REAR_] == CTL_YES)
		{
			st_map.nBufferCovAccyExist[2] = ACCY_NO_;
			st_map.nBufferCovAccyExist[3] = ACCY_NO_;
			st_work.sBufferConvBCR_Data[2] = "";
			st_work.sBufferConvBCR_Data[3] = "";
			st_work.nSkipReq_BufferConv[SIDE_REAR_] = CTL_NO;
			m_nStep_Run = 700;
			break;
		}
		nRet = Func.OnGet_UpStreamSmema();		// [상류 설비] SMEMA 상태 확인
		if(nRet == REQ_REQUEST_ON_)
		{
			// SLAVE_MODE(TOP)의 경우 Accy Math 코드를 하지 않음.
			// BCR가 없으므로 공급 진행.
			if (st_basic.nMode_SupplyMode == SLAVE_MODE)
			{
				Func.OnSet_UpStreamSmema(RDY_READY_ON_);	// [상류 설비] SMEMA 상태 설정
				OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
				m_lTime_GoesBy[0] = GetCurrentTime();
				m_nStep_Run = 380;
			}
			else
			{
				if (st_work.m_sAccyMathCode != "")
				{
					sTmp.Format("AccyMathCode = %s, BufferConvBCR_Data[2] = %s, BufferConvBCR_Data[3] = %s ",
						st_work.m_sAccyMathCode, st_work.sBufferConvBCR_Data[2], st_work.sBufferConvBCR_Data[3]);
					cLOG.OnLogEvent( LOG_BCR_, sTmp );
					
					if (st_work.m_sAccyMathCode == st_work.sBufferConvBCR_Data[2] &&
						st_work.m_sAccyMathCode == st_work.sBufferConvBCR_Data[3])
					{
						Func.OnSet_UpStreamSmema(RDY_READY_ON_);	// [상류 설비] SMEMA 상태 설정
						OnMove_AcMotor(AC_MV_CW_);	// AC 모터 구동/정지
						m_lTime_GoesBy[0] = GetCurrentTime();
						m_nStep_Run = 380;
					}
					else
					{
						// 145000 0 00 "ACCY_CONV_ACCY_BCR_DATA_MISS_MATH."
						alarm.mstr_code		= "145001";
						alarm.mn_count_mode	= 0;
						alarm.mn_type_mode	= eWARNING;
						st_work.nEqpStatus	= dWARNING;
					}
				}
			}
		}
		break;
*/
	case 380:
		if(st_basic.nMode_SMEMAUsing == SMEMA_NOT_USING)
		{
			m_lTime_GoesBy[1] = GetCurrentTime();
			m_lTime_GoesBy[2] = m_lTime_GoesBy[1] - m_lTime_GoesBy[0];
			if (m_lTime_GoesBy[2] < 0)
			{
				m_lTime_GoesBy[0] = GetCurrentTime();
				break;
			}
			
			// [WithOut] 모드인지 확인
			// - 자재가 없기 때문에 센서에 감지되지 않음
			// - 센서를 보고 멈출 수 있는 조건이 아니므로 일정 시간 후에 강제로 멈춤
			if (st_basic.n_mode_device == WITHOUT_DVC_)
			{
				if (m_lTime_GoesBy[2] >= (MAX_WAIT_ACCY_BOX_CONV_ / 5))
				{
					st_map.nBufferCovAccyExist[2] = ACCY_NO_;
					st_map.nBufferCovAccyExist[3] = ACCY_NO_;
					st_work.sBufferConvBCR_Data[2] = "";
					st_work.sBufferConvBCR_Data[3] = "";
					
					if (st_handler.cwnd_main != NULL)
					{
						// Buffer Cov 자재 존재 상태 표시 요청
						st_handler.cwnd_main->PostMessage(WM_UPDATE_MAIN, PLACE_BUFFER_CONV_);
					}
					OnMove_AcMotor(AC_MV_STOP_);	// AC 모터 구동/정지
					m_nStep_Run = 500;
				}
			}
			else
			{
				if(m_nReq_AcMotCtrl == REQ_MV_RESET_)
				{
					st_map.nBufferCovAccyExist[2] = ACCY_NO_;
					st_map.nBufferCovAccyExist[3] = ACCY_NO_;
					st_work.sBufferConvBCR_Data[2] = "";
					st_work.sBufferConvBCR_Data[3] = "";
					
					if (st_handler.cwnd_main != NULL)
					{
						// Buffer Cov 자재 존재 상태 표시 요청
						st_handler.cwnd_main->PostMessage(WM_UPDATE_MAIN, PLACE_BUFFER_CONV_);
					}
					m_nStep_Run = 500;
				}
			}
		}
		else
		{
			nRet = g_ioMgr.get_in_bit(stIO.i_Chk_ReqFromMain);		// [Conv<-Mani] 자재 공급 완료를 기다림
			if (nRet == IO_OFF)
			{
				OnMove_AcMotor(AC_MV_STOP_);	// AC 모터 구동/정지
				st_map.nBufferCovAccyExist[2] = ACCY_NO_;
				st_map.nBufferCovAccyExist[3] = ACCY_NO_;
				st_work.sBufferConvBCR_Data[2] = "";
				st_work.sBufferConvBCR_Data[3] = "";
				
				if (st_handler.cwnd_main != NULL)
				{
					// Buffer Cov 자재 존재 상태 표시 요청
					st_handler.cwnd_main->PostMessage(WM_UPDATE_MAIN, PLACE_BUFFER_CONV_);
				}
				Func.OnSet_UpStreamSmema(RDY_READY_OFF_);	// [상류 설비] SMEMA 상태 설정
				m_nStep_Run = 500;
			}
		}
		break;

	case 500:
		nRet = OnCheck_RearAccySupply(IO_ON);		// Buffer Conv Rear Accy 확인

		if (st_basic.n_mode_device == WITHOUT_DVC_)
		{
			if (st_map.nBufferCovAccyExist[2] == ACCY_NO_ && st_map.nBufferCovAccyExist[3] == ACCY_NO_)
			{
				nRet = IO_OFF;
			}
		}		
		if(nRet == IO_OFF && st_map.nBufferCovAccyExist[2] == ACCY_NO_ && st_map.nBufferCovAccyExist[3] == ACCY_NO_)
		{
			st_map.nResp_AccyReadyCNT -= 2;
			g_client_accy.OnCreate_SendFormat(MAIN_SUPPLY_READY_CNT);
			g_client_accy.OnReq_CommStart();
			m_nStep_Run = 700;
		}
		// yangkyu [2015.05.21]
		else if (nRet == IO_ON && st_map.nBufferCovAccyExist[2] == ACCY_NO_ && st_map.nBufferCovAccyExist[3] == ACCY_NO_)
		{
			// 142000 0 00 "PS1106_PS1107_PS1108_PS1109_ACCY_CONV_ACCY_EXSIT_CHK_ERR."
			alarm.mstr_code		= "142000";
			alarm.mn_count_mode	= 0;
			alarm.mn_type_mode	= eWARNING;
			st_work.nEqpStatus	= dWARNING;
		}
		break;

	case 700:
		nRetData[0] = OnCheck_FrontAccySupply(IO_ON);		// Buffer Conv Front Accy 확인
		nRetData[1] = OnCheck_RearAccySupply(IO_ON);		// Buffer Conv Rear Accy 확인
		nRetData[2] = OnCheck_OutAccySupply(IO_ON);		// Buffer Conv Out 확인

		if (st_basic.n_mode_device == WITHOUT_DVC_)
		{
			if (st_map.nBufferCovAccyExist[0] == ACCY_NO_ && st_map.nBufferCovAccyExist[1] == ACCY_NO_)
			{
				nRetData[0] = IO_OFF;
			}
			if (st_map.nBufferCovAccyExist[2] == ACCY_NO_ && st_map.nBufferCovAccyExist[3] == ACCY_NO_)
			{
				nRetData[1] = IO_OFF;
				
			}
			if (nRetData[0] == IO_OFF && nRetData[1] == IO_OFF)
			{
				nRetData[2] = IO_OFF;
			}
		}

		if(nRetData[0] == IO_OFF && nRetData[1] == IO_OFF && nRetData[2] == IO_OFF)
		{
			m_nStep_Run = 800;
		}
		break;

	case 800:
		OnSet_CylBufferTrayPitch(IO_ON);		// Accy를 보급 또는 공급을 위해 Buffer Tray Pitch를 변경 하는 실린더 [ON:Fw, OFF:Bw]
		m_nStep_Run = 810;
		break;

	case 810:
		nRet = OnGet_CylBufferTrayPitch(IO_ON);

		if(nRet == CTL_GOOD)
		{
			m_nStep_Run = 900;
		}
		else if (nRet == CTL_ERROR)
		{
			m_nStep_Run = 800;
		}
		break;

	case 900:
		OnSet_CylStopper(IO_ON);		// 악세사리 스토퍼 [ON:UP, OFF:DOWN]
		OnSet_CylBufferTrayPathAlign(IO_ON);		// Accy를 보급 또는 공급을 위해 Buffer Tray Path를 변경 하는 실린더 [ON:Up, OFF:Down]
		m_nStep_Run = 910;
		break;

	case 910:
		nRetData[0] = OnGet_CylStopper(IO_ON);
		nRetData[1] = OnGet_CylBufferTrayPathAlign(IO_ON);
		
		if(nRetData[0] == CTL_GOOD && nRetData[1] == CTL_GOOD)
		{
			m_nStep_Run = 10000;
		}
		else if(nRetData[0] == CTL_ERROR || nRetData[0] == CTL_ERROR)
		{
			m_nStep_Run = 900;
		}
		break;

	case 10000:
		stSync.nResp_BufferAlaignConv2XYZRbt_Work = SYNC_RESP_RESET_;
		m_nStep_Run = 0;
		break;
	}
}

//==================================================================//
// Accy Box 강제 배출 작업시 
//==================================================================//
int CSeq_BufferAlignConv::OnRun_ForceDischarge() 
{
	int nFuncRet = true;
	int nRetData[4] = {0,};
	
	Func.OnTrace_ThreadStep(18, m_nStep_ForceDischarge);	// 쓰레드 스텝 정보 TRACE
	
	// Box 배출 대기
	if(st_work.nForceDischarge != FORCEDISCHARGE_ON)
	{
		return true;
	}
	
	switch(m_nStep_ForceDischarge)
	{
	case 0:
		if(stSync.nForceDischargeComplete[SITE_BUFFER_CONV] != CTL_YES)
		{
			if (st_work.nForceDischargeType == 1)
			{
				stSync.nForceDischargeComplete[SITE_BUFFER_CONV] = CTL_YES;
				m_nStep_ForceDischarge = 0;
				break;
			}
			m_nStep_ForceDischarge = 100;
		}
		break;
		
	case 100:
		OnSet_CylBufferTrayPitch(IO_ON);		// Accy를 보급 또는 공급을 위해 Buffer Tray Pitch를 변경 하는 실린더 [ON:Fw, OFF:Bw]
		OnSet_CylStopper(IO_ON);		// 악세사리 스토퍼 [ON:UP, OFF:DOWN]
		OnSet_CylBufferTrayPathAlign(IO_ON);		// Accy를 보급 또는 공급을 위해 Buffer Tray Path를 변경 하는 실린더 [ON:Up, OFF:Down]
		m_nStep_ForceDischarge = 110;
		break;
		
	case 110:
		nRetData[0] = OnGet_CylBufferTrayPitch(IO_ON);
		nRetData[1] = OnGet_CylStopper(IO_ON);
		nRetData[2] = OnGet_CylBufferTrayPathAlign(IO_ON);
	
		if(nRetData[0] == CTL_GOOD && nRetData[1] == CTL_GOOD && nRetData[2] == CTL_GOOD)
		{
			m_nStep_ForceDischarge = 10000;
		}
		else if (nRetData[0] == CTL_ERROR || nRetData[1] == CTL_ERROR || nRetData[2] == CTL_ERROR)
		{
			m_nStep_ForceDischarge = 100;
		}
		break;
		
	case 10000:
		stSync.nResp_BufferAlaignConv2XYZRbt_Work = SYNC_RESP_RESET_;
		m_nStep_Run = 0;
		m_nStep_ForceDischarge = 0;
		stSync.nForceDischargeComplete[SITE_BUFFER_CONV] = CTL_YES;
		break;
	}
	
	return nFuncRet;
}

//==================================================================//
// AC 모터 구동/정지
//==================================================================//
void CSeq_BufferAlignConv::OnMove_AcMotor(int nzMoveType) 
{
	if (nzMoveType == AC_MV_CW_)
	{
		g_ioMgr.set_out_bit(stIO.o_BufferConvMotor[SIDE_LEFT_], IO_ON);
		g_ioMgr.set_out_bit(stIO.o_BufferConvMotor[SIDE_RIGHT_], IO_ON);
	}
	else if (nzMoveType == AC_MV_STOP_)
	{
		g_ioMgr.set_out_bit(stIO.o_BufferConvMotor[SIDE_LEFT_], IO_OFF);
		g_ioMgr.set_out_bit(stIO.o_BufferConvMotor[SIDE_RIGHT_], IO_OFF);

		m_nReq_AcMotCtrl = REQ_MV_RESET_;	// AC 모터 구동 요청 없음
	}
}

//==================================================================//
// 악세사리가 공급 되는 방향에서 Front Buffer 센서 확인
//==================================================================//
int CSeq_BufferAlignConv::OnCheck_FrontAccySupply(int nzOnOff, int nzMode, int nzSite) 
{
	if (nzSite < SIDE_LEFT_ || nzSite > SIDE_RIGHT_)
	{
		nzSite = SIDE_BOTH_;
	}

	int nReadIO[2] = {0,};
	// 센서가 B접이라 센서 상태 확인 시 반전 사용
	nReadIO[0] = !g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryAccyDetection[SIDE_FRONT_][SIDE_LEFT_]);
	nReadIO[1] = !g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryAccyDetection[SIDE_FRONT_][SIDE_RIGHT_]);

	if (nzSite == SIDE_LEFT_)
	{
		// [Right] 센서 입력은 강제로 설정
		nReadIO[1] = nzOnOff;
	}
	else if (nzSite == SIDE_RIGHT_)
	{
		// [Left] 센서 입력은 강제로 설정
		nReadIO[0] = nzOnOff;
	}

	// 자재 존재하는 경우에 대한 체크인지 확인
	if (nzMode == CHK_EXIST_)
	{
		// 현재 WithOut 모드인지 확인
		// - 자재없이 돌리고 있으므로 감지되지 않기 때문에 강제로 설정함
		if (st_basic.n_mode_device == WITHOUT_DVC_)
		{
			if (st_map.nLoadingAccyBoxExist[1] == 0)
			{
				nReadIO[0] = st_map.nBufferCovAccyExist[0];
				nReadIO[1] = st_map.nBufferCovAccyExist[1];
			}
			else
			{
				nReadIO[0] = st_map.nBufferCovAccyExist[0];
				nReadIO[1] = st_map.nBufferCovAccyExist[1];
			}
		}
	}

	if (nReadIO[0] == IO_ON && nReadIO[1] == IO_ON)
	{
		return IO_ON;	// 센서 감지
	}
	else	
	{
		return IO_OFF;	// 센서 미감지
	}
}

//==================================================================//
// 악세사리가 공급 되는 방향에서 Rear Buffer 센서 확인
//==================================================================//
int CSeq_BufferAlignConv::OnCheck_RearAccySupply(int nzOnOff, int nzMode, int nzSite) 
{
	if (nzSite < SIDE_LEFT_ || nzSite > SIDE_RIGHT_)
	{
		nzSite = SIDE_BOTH_;
	}
	
	int nReadIO[2] = {0,};
	// 센서가 B접이라 센서 상태 확인 시 반전 사용
	nReadIO[0] = !g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryAccyDetection[SIDE_REAR_][SIDE_LEFT_]);
	nReadIO[1] = !g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryAccyDetection[SIDE_REAR_][SIDE_RIGHT_]);
	
	if (nzSite == SIDE_LEFT_)
	{
		// [Right] 센서 입력은 강제로 설정
		nReadIO[1] = nzOnOff;
	}
	else if (nzSite == SIDE_RIGHT_)
	{
		// [Left] 센서 입력은 강제로 설정
		nReadIO[0] = nzOnOff;
	}
	
	// 자재 존재하는 경우에 대한 체크인지 확인
	if (nzMode == CHK_EXIST_)
	{
		// 현재 WithOut 모드인지 확인
		// - 자재없이 돌리고 있으므로 감지되지 않기 때문에 강제로 설정함
		if (st_basic.n_mode_device == WITHOUT_DVC_)
		{
			if (st_map.nLoadingAccyBoxExist[1] == 0)
			{
				nReadIO[0] = st_map.nBufferCovAccyExist[2];
				nReadIO[1] = st_map.nBufferCovAccyExist[3];
			}
			else
			{
				nReadIO[0] = st_map.nBufferCovAccyExist[2];
				nReadIO[1] = st_map.nBufferCovAccyExist[3];
			}
		}
	}
	
	if (nReadIO[0] == IO_ON && nReadIO[1] == IO_ON)
	{
		return IO_ON;	// 센서 감지
	}
	else	
	{
		return IO_OFF;	// 센서 미감지
	}
}

//==================================================================//
// 악세사리가 공급 되는 마지막 위치의 센서
//==================================================================//
int CSeq_BufferAlignConv::OnCheck_OutAccySupply(int nzOnOff, int nzMode, int nzSite) 
{
	if (nzSite < SIDE_LEFT_ || nzSite > SIDE_RIGHT_)
	{
		nzSite = SIDE_BOTH_;
	}
	
	int nReadIO[2] = {0,};
	// 센서가 B접이라 센서 상태 확인 시 반전 사용
	nReadIO[0] = !g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryAccyDetection[SIDE_OUT_][SIDE_LEFT_]);
	nReadIO[1] = !g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryAccyDetection[SIDE_OUT_][SIDE_RIGHT_]);
	
	if (nzSite == SIDE_LEFT_)
	{
		// [Right] 센서 입력은 강제로 설정
		nReadIO[1] = nzOnOff;
	}
	else if (nzSite == SIDE_RIGHT_)
	{
		// [Left] 센서 입력은 강제로 설정
		nReadIO[0] = nzOnOff;
	}
	
	// 자재 존재하는 경우에 대한 체크인지 확인
	if (nzMode == CHK_EXIST_)
	{
		// 현재 WithOut 모드인지 확인
		// - 자재없이 돌리고 있으므로 감지되지 않기 때문에 강제로 설정함
		if (st_basic.n_mode_device == WITHOUT_DVC_)
		{
			nReadIO[0] = nzOnOff;
			nReadIO[1] = nzOnOff;
		}
	}

	if (nReadIO[0] == IO_ON && nReadIO[1] == IO_ON)
	{
		return IO_ON;	// 센서 감지
	}
	else	
	{
		return IO_OFF;	// 센서 미감지
	}
}

//==================================================================//
// 악세사리를 보급과 공급에 있어 간격을 바꾸어 주는 실린더
// - IO_ON = Fw 상태이며, 보급 받는 간격
// - IO_OFF = Bw 상태이며, 공급 하는 간격
//==================================================================//
void CSeq_BufferAlignConv::OnSet_CylBufferTrayPitch(int nzOnOff) 
{
	g_ioMgr.set_out_bit(stIO.o_Cyl_BufferTryPitchFw, nzOnOff);
	g_ioMgr.set_out_bit(stIO.o_Cyl_BufferTryPitchBw, !nzOnOff);

	m_bflag_BufferTrayPitch = true;
	m_lWait_BufferTrayPitch[0] = GetCurrentTime();
}

int CSeq_BufferAlignConv::OnGet_CylBufferTrayPitch(int nzOnOff, int nzSite)  
{
	int nFunRet = CTL_PROCEED;

	int nReadIO[2] = {0,};
	nReadIO[0] = g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryPitchFw);
	nReadIO[1] = g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryPitchBw);

	if (nzSite == SIDE_FW_)
	{
		// [Bw] 센서 입력은 강제로 설정
		nReadIO[1] = !nzOnOff;
	}
	else if (nzSite == SIDE_BW_)
	{
		// [Fw] 센서 입력은 강제로 설정
		nReadIO[0] =  !nzOnOff;
	}

	m_lWait_BufferTrayPitch[1] = GetCurrentTime();
	m_lWait_BufferTrayPitch[2] = m_lWait_BufferTrayPitch[1] - m_lWait_BufferTrayPitch[0];

	if (m_lWait_BufferTrayPitch[2] < 0)
	{
		m_lWait_BufferTrayPitch[0] = GetCurrentTime();
	}

	if (nzOnOff == IO_OFF)		// 악세사리를 공급하는 간격
	{
		if (m_bflag_BufferTrayPitch == true &&
			nReadIO[0] == IO_OFF && nReadIO[1] == IO_ON )
		{
			m_lWait_BufferTrayPitch[0] = GetCurrentTime();
			m_bflag_BufferTrayPitch = false;
		}
		else if (m_bflag_BufferTrayPitch == false &&
			nReadIO[0] == IO_OFF && nReadIO[1] == IO_ON)
		{
			if (m_lWait_BufferTrayPitch[2] > st_time.nWait_Off[CYL_ACCY_BUFF_PITCH])
			{
				nFunRet = CTL_GOOD;	// [OFF:DOWN]
			}
		}
		else
		{
			if (m_lWait_BufferTrayPitch[2] > st_time.nWait_Limit[CYL_ACCY_BUFF_PITCH])
			{
				// 140003 0 00 "PS1005_ACCY_CONV_BUFFER_TYAY_PITCH_BW_CHK_ERR."
				alarm.mstr_code		= "140003";
				alarm.mn_count_mode	= 0;
				alarm.mn_type_mode	= eWARNING;
				st_work.nEqpStatus	= dWARNING;

				nFunRet = CTL_ERROR;
			}
		}
	}
	else		// 악세사리를 보급 받는 간격
	{
		if (m_bflag_BufferTrayPitch == true &&
			nReadIO[0] == IO_ON && nReadIO[1] == IO_OFF)
		{
			m_lWait_BufferTrayPitch[0] = GetCurrentTime();
			m_bflag_BufferTrayPitch = false;
		}
		else if (m_bflag_BufferTrayPitch == false &&
			nReadIO[0] == IO_ON && nReadIO[1] == IO_OFF)
		{
			if (m_lWait_BufferTrayPitch[2] > st_time.nWait_On[CYL_ACCY_BUFF_PITCH])
			{
				nFunRet = CTL_GOOD;	// [OFF:DOWN]
			}
		}
		else
		{
			if (m_lWait_BufferTrayPitch[2] > st_time.nWait_Limit[CYL_ACCY_BUFF_PITCH])
			{
				// 140002 0 00 "PS1004_ACCY_CONV_BUFFER_TYAY_PITCH_FW_CHK_ERR."
				alarm.mstr_code		= "140002";
				alarm.mn_count_mode	= 0;
				alarm.mn_type_mode	= eWARNING;
				st_work.nEqpStatus	= dWARNING;

				nFunRet = CTL_ERROR;
			}
		}
	}
	return nFunRet;
}

//==================================================================//
// 악세사리 보급과 공급을 받기 위한 위, 아래로 움직이는 실린더
// - IO_ON = UP 상태에서 보급
// - IO_OFF = DOWN 상태에서 공급
//==================================================================//
void CSeq_BufferAlignConv::OnSet_CylBufferTrayPathAlign(int nzOnOff) 
{
	g_ioMgr.set_out_bit(stIO.o_Cyl_BufferTryPathAlignUp, nzOnOff);
	g_ioMgr.set_out_bit(stIO.o_Cyl_BufferTryPathAlignDn, !nzOnOff);

	m_bflag_BufferTrayPathAlign = true;
	m_lWait_BufferTrayPathAlign[0] = GetCurrentTime();
}

int CSeq_BufferAlignConv::OnGet_CylBufferTrayPathAlign(int nzOnOff, int nzSite) 
{
	int nFunRet = CTL_PROCEED;

	int nReadIO[2] = {0,};
	nReadIO[0] = g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryPathAlignUp);
	nReadIO[1] = g_ioMgr.get_in_bit(stIO.i_Chk_BufferTryPathAlignDn);

	if (nzSite == SIDE_UP_)
	{
		// [DOWN] 센서 입력은 강제로 설정
		nReadIO[1] = !nzOnOff;
	}
	else if (nzSite == SIDE_DOWN_)
	{
		// [UP] 센서 입력은 강제로 설정
		nReadIO[0] =  !nzOnOff;
	}

	m_lWait_BufferTrayPathAlign[1] = GetCurrentTime();
	m_lWait_BufferTrayPathAlign[2] = m_lWait_BufferTrayPathAlign[1] - m_lWait_BufferTrayPathAlign[0];

	if (m_lWait_BufferTrayPathAlign[2] < 0)
	{
		m_lWait_BufferTrayPathAlign[0] = GetCurrentTime();
	}

	if (nzOnOff == IO_OFF)		// 악세사리를 공급 하는 위치
	{
		if (m_bflag_BufferTrayPathAlign == true &&
			nReadIO[0] == IO_OFF && nReadIO[1] == IO_ON )
		{
			m_lWait_BufferTrayPathAlign[0] = GetCurrentTime();
			m_bflag_BufferTrayPathAlign = false;
		}
		else if (m_bflag_BufferTrayPathAlign == false &&
			nReadIO[0] == IO_OFF && nReadIO[1] == IO_ON)
		{
			if (m_lWait_BufferTrayPathAlign[2] > st_time.nWait_Off[CYL_ACCY_BUFF_PATH_ALIGN])
			{
				nFunRet = CTL_GOOD;	// [OFF:DOWN]
			}
		}
		else
		{
			if (m_lWait_BufferTrayPathAlign[2] > st_time.nWait_Limit[CYL_ACCY_BUFF_PATH_ALIGN])
			{
				// 140004 0 00 "PS1101_ACCY_CONV_BUFFER_TYAY_PATH_ALIGN_DOWN_CHK_ERR."
				alarm.mstr_code		= "140004";
				alarm.mn_count_mode	= 0;
				alarm.mn_type_mode	= eWARNING;
				st_work.nEqpStatus	= dWARNING;

				nFunRet = CTL_ERROR;
			}
		}
	}
	else		// 악세사리를 보급 받는 위치
	{
		if (m_bflag_BufferTrayPathAlign == true &&
			nReadIO[0] == IO_ON && nReadIO[1] == IO_OFF)
		{
			m_lWait_BufferTrayPathAlign[0] = GetCurrentTime();
			m_bflag_BufferTrayPathAlign = false;
		}
		else if (m_bflag_BufferTrayPathAlign == false &&
			nReadIO[0] == IO_ON && nReadIO[1] == IO_OFF)
		{
			if (m_lWait_BufferTrayPathAlign[2] > st_time.nWait_On[CYL_ACCY_BUFF_PATH_ALIGN])
			{
				nFunRet = CTL_GOOD;	// [OFF:DOWN]
			}
		}
		else
		{
			if (m_lWait_BufferTrayPathAlign[2] > st_time.nWait_Limit[CYL_ACCY_BUFF_PATH_ALIGN])
			{
				// 140005 0 00 "PS1100_ACCY_CONV_BUFFER_TYAY_PATH_ALIGN_UP_CHK_ERR."
				alarm.mstr_code		= "140005";

				alarm.mn_count_mode	= 0;
				alarm.mn_type_mode	= eWARNING;
				st_work.nEqpStatus	= dWARNING;

				nFunRet = CTL_ERROR;
			}
		}
	}
	return nFunRet;
}

//==================================================================//
// 악세사리를 2개씩 공급 하기위해 Front와 Rear에 스토퍼
// Rear OFF을 하여 2개의 악세사리를 1차 공급, 
// Rear ON과 함께 Front OFF 하여 Front에 있는 악세사리를 Rear 전달,
//==================================================================//
void CSeq_BufferAlignConv::OnSet_CylStopper(int nzOnOff, int nzSite) 
{
	g_ioMgr.set_out_bit(stIO.o_Cyl_BufferAccyConvStopper,	nzOnOff);

	m_bflag_Stopper = true;
	m_lWait_Stopper[0] = GetCurrentTime();
}

int CSeq_BufferAlignConv::OnGet_CylStopper(int nzOnOff, int nzSite) 
{
	int nFunRet = CTL_PROCEED;

	if (nzSite < SIDE_FRONT_ || nzSite > SIDE_REAR_)
	{
		nzSite = SIDE_BOTH_;
	}

	int nReadIO[4] = {0,};
	nReadIO[0] = g_ioMgr.get_in_bit(stIO.i_Chk_BufferAccyConvStopper[SIDE_LEFT_][0]);	//	Down
	nReadIO[1] = g_ioMgr.get_in_bit(stIO.i_Chk_BufferAccyConvStopper[SIDE_LEFT_][1]);	// UP
	nReadIO[2] = g_ioMgr.get_in_bit(stIO.i_Chk_BufferAccyConvStopper[SIDE_RIGHT_][0]);
	nReadIO[3] = g_ioMgr.get_in_bit(stIO.i_Chk_BufferAccyConvStopper[SIDE_RIGHT_][1]);

	if (nzSite == SIDE_LEFT_)
	{
		// [Rear] 센서 입력은 강제로 설정
		nReadIO[2] = !nzOnOff;
		nReadIO[3] = !nzOnOff;
	}
	else if (nzSite == SIDE_RIGHT_)
	{
		// [Front] 센서 입력은 강제로 설정
		nReadIO[0] = !nzOnOff;
		nReadIO[1] = !nzOnOff;
	}

	m_lWait_Stopper[1] = GetCurrentTime();
	m_lWait_Stopper[2] = m_lWait_Stopper[1] - m_lWait_Stopper[0];
	if (m_lWait_Stopper[2] < 0)
	{
		m_lWait_Stopper[0] = GetCurrentTime();
	}

	if (nzOnOff == IO_OFF)
	{
		if (m_bflag_Stopper == true &&
			nReadIO[1] == IO_ON && nReadIO[0] == IO_OFF &&
			nReadIO[3] == IO_ON && nReadIO[2] == IO_OFF)
		{
			m_lWait_Stopper[0] = GetCurrentTime();
			m_bflag_Stopper = false;
		}
		else if (m_bflag_Stopper == false &&
			nReadIO[1] == IO_ON && nReadIO[0] == IO_OFF &&
			nReadIO[3] == IO_ON && nReadIO[2] == IO_OFF)
		{
			if (m_lWait_Stopper[2] > st_time.nWait_Off[CYL_ACCY_BUFF_IN_STOPPER])
			{
				nFunRet = CTL_GOOD;	// [OFF:DOWN]
			}
		}
		else
		{
			if (m_lWait_Stopper[2] > st_time.nWait_Limit[CYL_ACCY_BUFF_IN_STOPPER])
			{
				// 140000 0 00 "PS1103_PS1105_ACCY_CONV_STOPPER_DOWN_CHK_ERR."
				alarm.mstr_code		= "140000";
				alarm.mn_count_mode	= 0;
				alarm.mn_type_mode	= eWARNING;
				st_work.nEqpStatus	= dWARNING;
				
				nFunRet = CTL_ERROR;
			}
		}
	}
	else
	{
		if (m_bflag_Stopper == true &&
			nReadIO[1] == IO_OFF && nReadIO[0] == IO_ON &&
			nReadIO[3] == IO_OFF && nReadIO[2] == IO_ON)
		{
			m_lWait_Stopper[0] = GetCurrentTime();
			m_bflag_Stopper = false;
		}
		else if (m_bflag_Stopper == false &&
			nReadIO[1] == IO_OFF && nReadIO[0] == IO_ON &&
			nReadIO[3] == IO_OFF && nReadIO[2] == IO_ON)
		{
			if (m_lWait_Stopper[2] > st_time.nWait_On[CYL_ACCY_BUFF_IN_STOPPER])
			{
				nFunRet = CTL_GOOD;	// [OFF:DOWN]
			}
		}
		else
		{
			if (m_lWait_Stopper[2] > st_time.nWait_Limit[CYL_ACCY_BUFF_IN_STOPPER])
			{
				// 140001 0 00 "PS1102_PS1104_ACCY_CONV_STOPPER_UP_CHK_ERR."
				alarm.mstr_code		= "140001";
				alarm.mn_count_mode	= 0;
				alarm.mn_type_mode	= eWARNING;
				st_work.nEqpStatus	= dWARNING;
				
				nFunRet = CTL_ERROR;
			}
		}
	}
	return nFunRet;
}
